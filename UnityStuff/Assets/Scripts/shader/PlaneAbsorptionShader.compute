// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel getIndicatorMask
#pragma kernel g1_dists
#pragma kernel g2_dists
//#pragma kernel Absorptions
#pragma kernel AbsorptionFactors



float r_cell;       // outer radius
float r_sample;     // inner radius
float r_cell_sq;    // outer radius squared
float r_sample_sq;  // inner radius squared

float cos;          // cos(180-2*theta)
float sin;          // sin(180-2*theta)
float2 mu;          // absorption factors in cell, sample.

/* CONTENT: Read-only buffers. */
StructuredBuffer<float2> segment;                   // list of segment coordinates.
StructuredBuffer<float> cosBuffer;                      // list of cos(alpha) values for each alpha angle between flat ray and 3D ray.
uint bufCount_Segments;
uint3 indicatorCount;

/* CONTENT: 
* Initially: g1_dists from script, precomputed in shader. 
* Later: g1_dists+g2_dists for current theta angle. 
*/
RWStructuredBuffer<float2> g1DistancesOuter;          // Diffraction only in cell.
RWStructuredBuffer<float2> g1DistancesInner;          // Diffraction only in sample.
RWStructuredBuffer<float2> g2DistancesOuter;          // Diffraction only in cell.
RWStructuredBuffer<float2> g2DistancesInner;          // Diffraction only in sample.


/* Absorption */
//RWStructuredBuffer<float3> absorptions;           // Pointwise absorption factors.
RWStructuredBuffer<uint3> indicatorMask;          // Pointwise indicatorCount if ray is diffracted in point.
RWStructuredBuffer<float3> absorptionFactors;     // Absorption factors with diffraction/absorption in (s,sc), (c,sc), (c,c).


float getIntersectX(float2 v, float radius_sq, bool right)
{
    if (right)
    { 
        return sqrt(abs(radius_sq - pow(v.y, 2)));
    } 
    return -sqrt(abs(radius_sq - pow(v.y, 2)));
}

float2 ER_dists_F1(float2 v)
{
    float d_cell = 0.0;
    float d_sample = 0.0;
    
    if (length(v) <= r_sample)
    {
        d_cell = abs(getIntersectX(v, r_sample_sq, false) - getIntersectX(v, r_cell_sq, false));
        d_sample = abs(v.x - getIntersectX(v, r_sample_sq, false));
    }
    return float2(d_cell, d_sample);
}

float2 ER_dists_F2(float2 v)
{
    float d_cell = 0.0;
    float d_sample = 0.0;
    if (length(v) > r_sample & length(v) <= r_cell)
    {
        float RENx_o = getIntersectX(v, r_cell_sq, false);
        if (v.x >= 0 & abs(v.y) < r_sample)
        {
            float RENx_i = getIntersectX(v, r_sample_sq, false);
            float REXx_i = getIntersectX(v, r_sample_sq, true);
            d_cell = abs(RENx_o - RENx_i) + abs(REXx_i - v.x);
            d_sample = abs(RENx_i - REXx_i);
        }
        else
        {
            d_cell = abs(RENx_o - v.x);
        }
    }
    return float2(d_cell, d_sample);
}

/* call ER_dists for coordinate per diffraction case, save in shader variable. */
[numthreads(1024,1,1)]
void g1_dists(uint3 id : SV_DispatchThreadID)
{
    g1DistancesOuter[id.x] = ER_dists_F2(segment[id.x]); 
    g1DistancesInner[id.x] = ER_dists_F1(segment[id.x]);
}


/* call ER_dists for rotated coordinate per diffraction case, add to shader variable. */
[numthreads(1024,1,1)]
void g2_dists (uint3 id : SV_DispatchThreadID)
{
    float2 rv = float2(
        cos*segment[id.x].x-sin*segment[id.x].y, 
        sin*segment[id.x].x+cos*segment[id.x].y
    );
    g2DistancesOuter[id.x] = g1DistancesOuter[id.x] + ER_dists_F2(rv);
    g2DistancesInner[id.x] = g1DistancesInner[id.x] + ER_dists_F1(rv);
}


/* call ER_dists for coordinate per diffraction case, save in shader variable. */
[numthreads(1024,1,1)]
void getIndicatorMask(uint3 id : SV_DispatchThreadID)
{
    float norm = length(segment[id.x]);
    
    if (norm <= r_cell)
    {
        if (norm > r_sample)
        {
            // case A_{c,sc}.
            indicatorMask[id.x].y = true;
            indicatorCount.y += 1;
            
            // case A_{c,c}.
            indicatorMask[id.x].z = true;
            indicatorCount.z += 1;
        }
        else 
        {
            // case A_{c,c}.
            indicatorMask[id.x].x = true;
            indicatorCount.x += 1;
        }
    }
}


/*
float2 rotatePoint(uint i)
{
    return float2(
            cos*segment[i].x-sin*segment[i].y, 
            sin*segment[i].x+cos*segment[i].y);
}
*/


/*
[numthreads(1024,1,1)]
void Absorptions(uint3 id : SV_DispatchThreadID)
{
    absorptions[id.x].x = indicatorMask[id.x].x * exp(-dot(mu, distancesInner[id.x]));    // case A_{s,sc}.
    absorptions[id.x].y = indicatorMask[id.x].y * exp(-dot(mu, distancesOuter[id.x]));    // case A_{s,sc}.
    absorptions[id.x].z = indicatorMask[id.x].z * exp(-dot(float2(mu.x, 0.0), distancesOuter[id.x]));    // case A_{s,sc}.
}
*/ 


/**
* @param index: the index of each cos(alpha).
*/
[numthreads(1024,1,1)]
void AbsorptionFactors(uint3 id : SV_DispatchThreadID)
{
    // TODO: check float accuracy.
    float3 absorptionSum = float3(0.0, 0.0, 0.0);
    
    for (uint i = 0; i < bufCount_Segments; i++)
    {
        absorptionSum.x += indicatorMask[i].x * exp(
            -dot(mu, g1DistancesInner[i] + g2DistancesInner[i]/cosBuffer[id.x]));    // case A_{s,sc}.
        absorptionSum.y += indicatorMask[i].y * exp(
            -dot(mu, g1DistancesOuter[i] + g2DistancesOuter[i]/cosBuffer[id.x]));    // case A_{s,sc}.
        absorptionSum.z += indicatorMask[i].z * exp(
            -dot(float2(mu.x, 0.0), g1DistancesOuter[i] + g2DistancesOuter[i]/cosBuffer[id.x]));    // case A_{s,sc}.
    }
    
    absorptionFactors[id.x] = absorptionSum/indicatorCount;
}