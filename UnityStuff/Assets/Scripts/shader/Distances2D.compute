// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel g1_dists
#pragma kernel g2_dists
#pragma kernel Absorptions
//#pragma fragment frag
//#pragma fragmentoption ARB_precision_hint_nicest


float r_cell;       // outer radius
float r_sample;     // inner radius
float r_cell_sq;    // outer radius squared
float r_sample_sq;  // inner radius squared
float cos;          // cos(180-2*theta)
float sin;          // sin(180-2*theta)
float2 mu;          // absorption factors in cell, sample.

StructuredBuffer<float2> segment;

/* INPUT: g1_dists from script, precomputed in shader. (maybe keep in shader) */
RWStructuredBuffer<float2> distancesOuter;       // Diffraction only in cell.
RWStructuredBuffer<float2> distancesInner;       // Diffraction only in sample.
RWStructuredBuffer<float3> absorptions;          // Absorption values with diffraction/absorption in (s,sc), (c,sc), (c,c).


// TODO: test efficiency of radius*radius vs radius_sq.

[numthreads(1024,1,1)]
void Test(uint3 id : SV_DispatchThreadID)
{
    distancesOuter[id.x] = float2(1.0,3.0);
    distancesInner[id.x] = float2(segment[id.x][1], sqrt(abs(segment[id.x][0])));
}

float getIntersectX (float2 v, float radius_sq, bool right)
{
    if (right)
    { 
        return sqrt(abs(radius_sq - pow(v.y, 2)));
    } 
    return -sqrt(abs(radius_sq - pow(v.y, 2)));
}

float2 ER_dists_F1 (float2 v)
{
    float d_cell = 0.0;
    float d_sample = 0.0;
    
    if (length(v) <= r_sample)
    {
        d_cell = abs(getIntersectX(v, r_sample_sq, false) - getIntersectX(v, r_cell_sq, false));
        d_sample = abs(v.x - getIntersectX(v, r_sample_sq, false));
    }
    return float2(d_cell, d_sample);
}

float2 ER_dists_F2 (float2 v)
{
    float d_cell = 0.0;
    float d_sample = 0.0;
    if (length(v) > r_sample & length(v) <= r_cell)
    {
        float RENx_o = getIntersectX(v, r_cell_sq, false);
        if (v.x >= 0 & abs(v.y) < r_sample)
        {
            float RENx_i = getIntersectX(v, r_sample_sq, false);
            float REXx_i = getIntersectX(v, r_sample_sq, true);
            d_cell = abs(RENx_o - RENx_i) + abs(REXx_i - v.x);
            d_sample = abs(RENx_i - REXx_i);
        }
        else
        {
            d_cell = abs(RENx_o - v.x);
        }
    }
    return float2(d_cell, d_sample);
}

/* call ER_dists for coordinate per diffraction case, save in shader variable. */
[numthreads(1024,1,1)]
void g1_dists (uint3 id : SV_DispatchThreadID)
{
    // 
    distancesOuter[id.x] = ER_dists_F2(segment[id.x]); 
    distancesInner[id.x] = ER_dists_F1(segment[id.x]);
}

/* call ER_dists for rotated coordinate per diffraction case, add to shader variable. */
[numthreads(1024,1,1)]
void g2_dists (uint3 id : SV_DispatchThreadID)
{
    float2 rv = float2(cos*segment[id.x].x-sin*segment[id.x].y, sin*segment[id.x].x+cos*segment[id.x].y);
    distancesOuter[id.x] = distancesOuter[id.x] + ER_dists_F2(rv);
    distancesInner[id.x] = distancesInner[id.x] + ER_dists_F1(rv);
}

[numthreads(1024,1,1)]
void Absorptions(uint3 id : SV_DispatchThreadID){
    float norm = length(segment[id.x]);
    if (norm <= r_cell)
    {
        absorptions[id.x].x = exp(-dot(mu, distancesInner[id.x]));                 // case A_{s,sc}.
        absorptions[id.x].y = exp(-dot(mu, distancesOuter[id.x]));                 // case A_{c,sc}.
        if (norm > r_sample)
        {
            absorptions[id.x].z = exp(-dot(float2(mu.x, 0.0), distancesOuter[id.x]));  // case A_{c,c}.
        }
    }
    
    
    
}