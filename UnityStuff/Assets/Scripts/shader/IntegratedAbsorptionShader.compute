#pragma kernel get_indicator
#pragma kernel get_dists_part1
#pragma kernel get_dists_part2
#pragma kernel get_absorptions

#include "Shared.compute"

// PARAMETERS (constant):
float2 r;                                           // (cell,sample) radius of the medium.
float2 r2;                                          // r^2.
float2 mu;                                          // (cell,sample) mass attenuation coefficient.
float2 ray_dim;                                     // (width,height) dimensions of the ray.
float2 ray_offset;                              // (x,y) offset of the ray, relative to capillary center.

// PARAMETERS (variable):   
float2 rot;                                         // (cos,sin) of the coordinate rotation by pi-theta.
float stretch_factor;                               // ratio of diffracted ray distance to its XY-projection.  


// BUFFERS (read-only): 
StructuredBuffer<float2> coordinates;               // list of given coordinates in the medium cross-section.

// BUFFERS (variable):
RWStructuredBuffer<uint2> indicator_mask;           // Point-wise indicator if ray diffraction happens at coordinate.
RWStructuredBuffer<float2> distances_cell_part1;    // Ray travel distance through cell, before diffraction.
RWStructuredBuffer<float2> distances_sample_part1;  // Ray travel distance through sample, before diffraction.
RWStructuredBuffer<float2> distances_cell_part2;    // Ray travel distance through cell, after diffraction.
RWStructuredBuffer<float2> distances_sample_part2;  // Ray travel distance through sample, after diffraction.
RWStructuredBuffer<float3> absorptions;             // Point-wise absorption factors at coordinate.



/* call ER_dists for coordinate per diffraction case, save in shader variable. */
[numthreads(1024,1,1)]
void get_dists_part1(uint3 id : SV_DispatchThreadID)
{
    distances_cell_part1[id.x] = get_dists_case2(coordinates[id.x], r, r2); 
    distances_sample_part1[id.x] = get_dists_case1(coordinates[id.x], r, r2);
}


/* call ER_dists for rotated coordinate per diffraction case, add to shader variable. */
[numthreads(1024,1,1)]
void get_dists_part2 (uint3 id : SV_DispatchThreadID)
{
    float2 rv = rotate_point(coordinates[id.x], rot);
    distances_cell_part2[id.x] = get_dists_case2(rv, r, r2);
    distances_sample_part2[id.x] = get_dists_case1(rv, r, r2);
}


/* call ER_dists for coordinate per diffraction case, save in shader variable. */
[numthreads(1024,1,1)]
void get_indicator(uint3 id : SV_DispatchThreadID)
{
    float norm = length(coordinates[id.x]);
    
    if (norm <= r.x && abs(coordinates[id.x].y - ray_offset.x) <= ray_dim.x)
    {
        if (norm > r.y) indicator_mask[id.x].y = 1;    // cases A_{c,sc}, A_{c,c}.
        else indicator_mask[id.x].x = 1;    // case A_{s,sc}.
    }
}


[numthreads(1024,1,1)]
void get_absorptions(uint3 id : SV_DispatchThreadID){
    if (indicator_mask[id.x].x > 0)
    {
        absorptions[id.x].x = exp(
            -dot(mu,distances_sample_part1[id.x] + distances_sample_part2[id.x] * stretch_factor)); // case A_{s,sc}.
    }
    
    if (indicator_mask[id.x].y > 0) 
    {
        absorptions[id.x].y = exp(
            -dot(mu, distances_cell_part1[id.x] + distances_cell_part2[id.x] * stretch_factor)); // case A_{c,sc}.
        absorptions[id.x].z = exp(-dot(float2(mu.x, 0.0),
            distances_cell_part1[id.x] + distances_cell_part2[id.x] * stretch_factor)); // case A_{c,c}.
    }
}